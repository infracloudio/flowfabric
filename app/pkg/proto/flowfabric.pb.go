// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flowfabric.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CaptureRequest containing network capture request
type CaptureRequest struct {
	Pod                  string   `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaptureRequest) Reset()         { *m = CaptureRequest{} }
func (m *CaptureRequest) String() string { return proto.CompactTextString(m) }
func (*CaptureRequest) ProtoMessage()    {}
func (*CaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f228048f95a44b08, []int{0}
}

func (m *CaptureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureRequest.Unmarshal(m, b)
}
func (m *CaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureRequest.Marshal(b, m, deterministic)
}
func (m *CaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureRequest.Merge(m, src)
}
func (m *CaptureRequest) XXX_Size() int {
	return xxx_messageInfo_CaptureRequest.Size(m)
}
func (m *CaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureRequest proto.InternalMessageInfo

func (m *CaptureRequest) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

// CaputreResponse containing network details
type CaptureResponse struct {
	SrcIp                string   `protobuf:"bytes,1,opt,name=srcIp,proto3" json:"srcIp,omitempty"`
	DstIp                string   `protobuf:"bytes,2,opt,name=dstIp,proto3" json:"dstIp,omitempty"`
	SrcPort              string   `protobuf:"bytes,3,opt,name=srcPort,proto3" json:"srcPort,omitempty"`
	DstPort              string   `protobuf:"bytes,4,opt,name=dstPort,proto3" json:"dstPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CaptureResponse) Reset()         { *m = CaptureResponse{} }
func (m *CaptureResponse) String() string { return proto.CompactTextString(m) }
func (*CaptureResponse) ProtoMessage()    {}
func (*CaptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f228048f95a44b08, []int{1}
}

func (m *CaptureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CaptureResponse.Unmarshal(m, b)
}
func (m *CaptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CaptureResponse.Marshal(b, m, deterministic)
}
func (m *CaptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptureResponse.Merge(m, src)
}
func (m *CaptureResponse) XXX_Size() int {
	return xxx_messageInfo_CaptureResponse.Size(m)
}
func (m *CaptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CaptureResponse proto.InternalMessageInfo

func (m *CaptureResponse) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *CaptureResponse) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *CaptureResponse) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *CaptureResponse) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func init() {
	proto.RegisterType((*CaptureRequest)(nil), "proto.CaptureRequest")
	proto.RegisterType((*CaptureResponse)(nil), "proto.CaptureResponse")
}

func init() { proto.RegisterFile("flowfabric.proto", fileDescriptor_f228048f95a44b08) }

var fileDescriptor_f228048f95a44b08 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xcb, 0xc9, 0x2f,
	0x4f, 0x4b, 0x4c, 0x2a, 0xca, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0x4a, 0x5c, 0x7c, 0xce, 0x89, 0x05, 0x25, 0xa5, 0x45, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x02, 0x5c, 0xcc, 0x05, 0xf9, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x20, 0xa6, 0x52, 0x21, 0x17, 0x3f, 0x5c, 0x4d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08,
	0x17, 0x6b, 0x71, 0x51, 0xb2, 0x67, 0x01, 0x54, 0x19, 0x84, 0x03, 0x12, 0x4d, 0x29, 0x2e, 0xf1,
	0x2c, 0x90, 0x60, 0x82, 0x88, 0x82, 0x39, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0x45, 0xc9, 0x01, 0xf9,
	0x45, 0x25, 0x12, 0xcc, 0x60, 0x71, 0x18, 0x17, 0x24, 0x93, 0x52, 0x5c, 0x02, 0x96, 0x61, 0x81,
	0xc8, 0x40, 0xb9, 0x46, 0x7e, 0x5c, 0x7c, 0x7e, 0xa9, 0x25, 0xe5, 0xf9, 0x45, 0xd9, 0x50, 0x9b,
	0x85, 0x6c, 0xb8, 0xd8, 0x61, 0x4c, 0x51, 0x88, 0x17, 0xf4, 0x50, 0x1d, 0x2e, 0x25, 0x86, 0x2e,
	0x0c, 0x71, 0xab, 0x12, 0x83, 0x01, 0x63, 0x12, 0x1b, 0x58, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0x97, 0x79, 0x8b, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkCaptureClient is the client API for NetworkCapture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkCaptureClient interface {
	// Capture captures network
	Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (NetworkCapture_CaptureClient, error)
}

type networkCaptureClient struct {
	cc *grpc.ClientConn
}

func NewNetworkCaptureClient(cc *grpc.ClientConn) NetworkCaptureClient {
	return &networkCaptureClient{cc}
}

func (c *networkCaptureClient) Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (NetworkCapture_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkCapture_serviceDesc.Streams[0], "/proto.NetworkCapture/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkCaptureCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkCapture_CaptureClient interface {
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type networkCaptureCaptureClient struct {
	grpc.ClientStream
}

func (x *networkCaptureCaptureClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkCaptureServer is the server API for NetworkCapture service.
type NetworkCaptureServer interface {
	// Capture captures network
	Capture(*CaptureRequest, NetworkCapture_CaptureServer) error
}

// UnimplementedNetworkCaptureServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkCaptureServer struct {
}

func (*UnimplementedNetworkCaptureServer) Capture(req *CaptureRequest, srv NetworkCapture_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}

func RegisterNetworkCaptureServer(s *grpc.Server, srv NetworkCaptureServer) {
	s.RegisterService(&_NetworkCapture_serviceDesc, srv)
}

func _NetworkCapture_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkCaptureServer).Capture(m, &networkCaptureCaptureServer{stream})
}

type NetworkCapture_CaptureServer interface {
	Send(*CaptureResponse) error
	grpc.ServerStream
}

type networkCaptureCaptureServer struct {
	grpc.ServerStream
}

func (x *networkCaptureCaptureServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkCapture_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NetworkCapture",
	HandlerType: (*NetworkCaptureServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _NetworkCapture_Capture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flowfabric.proto",
}
